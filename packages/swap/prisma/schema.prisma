// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// `pnpm prisma format` after changes :)

generator client {
  provider        = "prisma-client-js"
  // https://github.com/prisma/prisma/issues/2584#issuecomment-646414549
  // https://github.com/prisma/prisma/issues/6603#issuecomment-849979849
  output          = "../node_modules/@prisma/swapping"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "private"]
}

model DepositChannel {
  id             BigInt  @id @default(autoincrement())
  channelId      BigInt
  srcChain       Chain
  issuedBlock    Int
  depositAddress String
  isSwapping     Boolean

  @@unique([issuedBlock, srcChain, channelId])
  @@index([depositAddress])
  @@schema("private")
}

enum Chain {
  Polkadot
  Ethereum
  Bitcoin
  Arbitrum
  Solana
  Assethub

  @@schema("public")
}

enum InternalAsset {
  Flip
  Usdc
  Dot
  Eth
  Btc
  Usdt
  ArbEth
  ArbUsdc
  Sol
  SolUsdc
  HubDot
  HubUsdt
  HubUsdc

  @@schema("public")
}

model SwapDepositChannel {
  id                        BigInt               @id @default(autoincrement())
  channelId                 BigInt
  srcChain                  Chain
  srcAsset                  InternalAsset
  depositAddress            String
  expectedDepositAmount     Decimal?             @db.Decimal(30, 0)
  destAsset                 InternalAsset
  destAddress               String
  ccmGasBudget              Decimal?             @db.Decimal(30, 0)
  ccmMessage                String?
  issuedBlock               Int
  expiryBlock               Int? // TODO(mainnet): remove this column
  srcChainExpiryBlock       BigInt?
  totalBrokerCommissionBps  Int
  maxBoostFeeBps            Int                  @default(0)
  isExpired                 Boolean              @default(false)
  createdAt                 DateTime             @default(now())
  failedSwaps               FailedSwap[]
  estimatedExpiryAt         DateTime?
  openedThroughBackend      Boolean              @default(false)
  openingFeePaid            Decimal              @db.Decimal(30, 0)
  beneficiaries             SwapBeneficiary[]
  failedBoosts              FailedBoost[]
  fokMinPriceX128           Decimal?             @db.Decimal(78, 0)
  fokRefundAddress          String?
  fokRetryDurationBlocks    Int?
  fokMaxOraclePriceSlippage Int?
  dcaNumberOfChunks         Int?                 @default(1)
  dcaChunkIntervalBlocks    Int?
  swapRequests              SwapRequest[]
  quote                     Quote?
  solanaPendingTxRef        SolanaPendingTxRef[]

  @@unique([issuedBlock, srcChain, channelId])
  @@index([depositAddress])
  @@schema("public")
}

enum BrokerType {
  SUBMITTER
  AFFILIATE

  @@schema("public")
}

model SwapBeneficiary {
  id            BigInt              @id @default(autoincrement())
  account       String
  commissionBps Int
  type          BrokerType
  channel       SwapDepositChannel? @relation(fields: [channelId], references: [id])
  channelId     BigInt?
  swapRequest   SwapRequest?        @relation(fields: [swapRequestId], references: [id])
  swapRequestId BigInt?

  @@index([channelId])
  @@schema("public")
}

enum SwapRequestOrigin {
  DEPOSIT_CHANNEL
  VAULT
  INTERNAL
  ON_CHAIN

  @@schema("public")
}

model OnChainSwapInfo {
  id Int @id @default(autoincrement())

  swapRequest   SwapRequest @relation(fields: [swapRequestId], references: [id])
  swapRequestId BigInt      @unique

  outputAmount Decimal? @db.Decimal(30, 0)
  refundAmount Decimal? @db.Decimal(30, 0)

  accountId String

  @@schema("public")
}

enum SwapRequestType {
  LEGACY_SWAP
  NETWORK_FEE
  INGRESS_EGRESS_FEE
  REGULAR
  LEGACY_CCM

  @@schema("public")
}

model SwapRequest {
  id                         BigInt               @id @default(autoincrement())
  /// the swap request id on the state chain
  nativeId                   BigInt               @unique
  originType                 SwapRequestOrigin
  swapDepositChannel         SwapDepositChannel?  @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId       BigInt?
  depositTransactionRef      String?
  srcAsset                   InternalAsset
  destAsset                  InternalAsset
  depositAmount              Decimal?             @db.Decimal(30, 0)
  swapInputAmount            Decimal              @db.Decimal(30, 0)
  swapOutputAmount           Decimal?             @db.Decimal(30, 0)
  requestType                SwapRequestType
  ccmGasBudget               Decimal?             @db.Decimal(30, 0)
  ccmMessage                 String?
  srcAddress                 String?
  destAddress                String?
  swapRequestedAt            DateTime
  swapRequestedBlockIndex    String
  depositFinalisedAt         DateTime?
  depositFinalisedBlockIndex String?
  prewitnessedDepositId      BigInt?
  maxBoostFeeBps             Int                  @default(0)
  effectiveBoostFeeBps       Int?
  depositBoostedAt           DateTime?
  depositBoostedBlockIndex   String?
  completedAt                DateTime?
  completedBlockIndex        String?
  egress                     Egress?              @relation("egress", fields: [egressId], references: [id])
  egressId                   BigInt?
  refundEgress               Egress?              @relation("refundEgress", fields: [refundEgressId], references: [id])
  refundEgressId             BigInt?
  fallbackEgress             Egress?              @relation("fallbackEgress", fields: [fallbackEgressId], references: [id])
  fallbackEgressId           BigInt?
  ignoredEgresses            IgnoredEgress[]
  swaps                      Swap[]
  fees                       SwapFee[]
  dcaNumberOfChunks          Int?
  dcaChunkIntervalBlocks     Int?
  fokMinPriceX128            Decimal?             @db.Decimal(78, 0)
  fokRefundAddress           String?
  fokRetryDurationBlocks     Int?
  fokMaxOraclePriceSlippage  Int?
  quote                      Quote?
  totalBrokerCommissionBps   Int
  beneficiaries              SwapBeneficiary[]
  solanaPendingTxRef         SolanaPendingTxRef[]
  onChainSwapInfo            OnChainSwapInfo?

  @@index([srcAsset, prewitnessedDepositId])
  @@index([nativeId])
  @@schema("public")
}

enum SwapType {
  SWAP
  PRINCIPAL
  GAS
  INGRESS_EGRESS_FEE
  NETWORK_FEE

  @@schema("public")
}

model Swap {
  id                              BigInt        @id @default(autoincrement())
  /// the swap id on the state chain
  nativeId                        BigInt        @unique
  type                            SwapType
  srcAsset                        InternalAsset
  swapInputAmount                 Decimal       @db.Decimal(30, 0) // deposit amount after ingress fee was decucted
  intermediateAmount              Decimal?      @db.Decimal(30, 0)
  swapOutputAmount                Decimal?      @db.Decimal(30, 0) // output of the swap before egress fee is deducted
  fees                            SwapFee[]
  destAsset                       InternalAsset
  swapCanceledAt                  DateTime?
  swapCanceledBlockIndex          String?
  swapExecutedAt                  DateTime?
  swapExecutedBlockIndex          String?
  swapScheduledAt                 DateTime
  swapScheduledBlockIndex         String
  latestSwapRescheduledAt         DateTime?
  latestSwapRescheduledBlockIndex String?
  retryCount                      Int           @default(0)
  swapRequest                     SwapRequest   @relation(fields: [swapRequestId], references: [id])
  swapRequestId                   BigInt
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @default(now()) @updatedAt

  @@index([nativeId])
  @@schema("public")
}

enum SwapFeeType {
  LIQUIDITY
  NETWORK
  INGRESS
  EGRESS
  BROKER
  BOOST
  REFUND

  @@schema("public")
}

model SwapFee {
  id            BigInt        @id @default(autoincrement())
  swap          Swap?         @relation(fields: [swapId], references: [id])
  swapId        BigInt?
  swapRequest   SwapRequest?  @relation(fields: [swapRequestId], references: [id])
  swapRequestId BigInt?
  type          SwapFeeType
  asset         InternalAsset
  amount        Decimal       @db.Decimal(30, 0)

  @@index([swapId])
  @@index([swapRequestId])
  @@schema("public")
}

enum FailedSwapReason {
  BelowMinimumDeposit
  NotEnoughToPayFees // gas price to process deposit is too high
  TransactionRejectedByBroker
  UnsupportedForTargetChain // CCM reason
  InsufficientDepositAmount // CCM reason
  InvalidMetadata // CCM reason
  InvalidDestinationAddress // CCM reason
  DepositWitnessRejected
  InvalidBrokerFees
  InvalidDcaParameters
  InvalidRefundParameters
  CcmUnsupportedForTargetChain
  CcmInvalidMetadata

  @@schema("public")
}

model FailedSwap {
  id                    Int                  @id @default(autoincrement())
  reason                FailedSwapReason
  destAddress           String?
  destChain             Chain?
  destAsset             InternalAsset?
  depositAmount         Decimal              @db.Decimal(30, 0)
  srcChain              Chain
  srcAsset              InternalAsset
  swapDepositChannel    SwapDepositChannel?  @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId  BigInt?
  depositTransactionRef String?
  failedAt              DateTime
  failedBlockIndex      String
  ccmGasBudget          Decimal?             @db.Decimal(30, 0)
  ccmMessage            String?
  ccmAdditionalData     String?
  refundBroadcast       Broadcast?           @relation(fields: [refundBroadcastId], references: [id])
  refundBroadcastId     BigInt?
  refundEgress          Egress?              @relation(fields: [refundEgressId], references: [id])
  refundEgressId        BigInt?
  solanaPendingTxRef    SolanaPendingTxRef[]

  @@index([swapDepositChannelId])
  @@schema("public")
}

model FailedBoost {
  id                    Int                 @id @default(autoincrement())
  prewitnessedDepositId BigInt
  asset                 InternalAsset
  amount                Decimal             @db.Decimal(30, 0)
  swapDepositChannel    SwapDepositChannel? @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId  BigInt?
  failedAtTimestamp     DateTime
  failedAtBlockIndex    String

  @@index([swapDepositChannelId])
  @@schema("public")
}

enum EgressIgnoredType {
  SWAP
  REFUND

  @@schema("public")
}

model IgnoredEgress {
  id                BigInt            @id @default(autoincrement())
  amount            Decimal           @db.Decimal(30, 0)
  ignoredAt         DateTime
  ignoredBlockIndex String
  swapRequest       SwapRequest       @relation(fields: [swapRequestId], references: [id])
  swapRequestId     BigInt            @unique
  stateChainError   StateChainError   @relation(fields: [stateChainErrorId], references: [id])
  stateChainErrorId Int
  type              EgressIgnoredType
  createdAt         DateTime          @default(now())

  @@schema("public")
}

model Egress {
  id                            BigInt        @id @default(autoincrement())
  /// the egress id on the state chain
  nativeId                      BigInt
  chain                         Chain
  amount                        Decimal       @db.Decimal(30, 0)
  scheduledAt                   DateTime
  scheduledBlockIndex           String
  fallbackDestinationAddress    String?
  broadcast                     Broadcast?    @relation(fields: [broadcastId], references: [id])
  broadcastId                   BigInt?
  swapRequests                  SwapRequest[] @relation("egress")
  refundedSwapRequests          SwapRequest[] @relation("refundEgress")
  failedSwaps                   FailedSwap[]
  fallbackRequestedSwapRequests SwapRequest[] @relation("fallbackEgress")

  @@unique([nativeId, chain])
  @@schema("public")
}

model Broadcast {
  id                  BigInt       @id @default(autoincrement())
  /// the broadcast id on the state chain
  nativeId            BigInt
  chain               Chain
  egresses            Egress[]
  requestedAt         DateTime
  requestedBlockIndex String
  succeededAt         DateTime?
  succeededBlockIndex String?
  abortedAt           DateTime?
  abortedBlockIndex   String?
  transactionPayload  String?
  replacedBy          Broadcast?   @relation("replacedBy", fields: [replacedById], references: [id])
  replaces            Broadcast?   @relation("replacedBy")
  replacedById        BigInt?      @unique
  transactionRef      String?      @unique
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now()) @updatedAt
  failedSwaps         FailedSwap[]

  @@unique([nativeId, chain])
  @@schema("public")
}

model State {
  id     Int @id @default(autoincrement())
  height Int @default(0)

  @@schema("private")
}

model MarketMaker {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  publicKey  String
  beta       Boolean     @default(false)
  mevFactors MevFactor[]

  @@schema("private")
}

enum Side {
  BUY
  SELL

  @@schema("private")
}

model MevFactor {
  id            Int           @id @default(autoincrement())
  marketMaker   MarketMaker   @relation(fields: [marketMakerId], references: [id])
  marketMakerId Int
  asset         InternalAsset
  side          Side
  factor        Int

  @@unique([marketMakerId, asset, side])
  @@schema("private")
}

enum ThirdPartyProtocol {
  lifi
  squid

  @@schema("public")
}

model ThirdPartySwap {
  id            BigInt             @id @default(autoincrement())
  uuid          String             @unique
  protocol      ThirdPartyProtocol
  routeResponse Json
  txHash        String
  txLink        String
  createdAt     DateTime           @default(now())

  @@schema("public")
}

model Pool {
  id                        Int           @id @default(autoincrement())
  baseAsset                 InternalAsset
  quoteAsset                InternalAsset
  liquidityFeeHundredthPips Int

  @@unique([baseAsset, quoteAsset])
  @@schema("public")
}

model BoostPool {
  id              Int           @id @default(autoincrement())
  depositEnabled  Boolean
  withdrawEnabled Boolean
  boostEnabled    Boolean
  asset           InternalAsset
  feeTierPips     Int

  @@unique([asset, feeTierPips])
  @@schema("public")
}

model BoostDelayChainflipBlocks {
  id        Int   @id @default(autoincrement())
  chain     Chain @unique
  numBlocks Int

  @@schema("public")
}

model ChainTracking {
  id                  Int      @id @default(autoincrement())
  chain               Chain    @unique
  height              BigInt   @default(0)
  previousHeight      BigInt   @default(0)
  eventWitnessedBlock Int
  blockTrackedAt      DateTime @default(now())
  updatedAt           DateTime @updatedAt @db.Timestamptz(3)

  @@schema("public")
}

model StateChainError {
  id              Int             @id @default(autoincrement())
  specVersion     Int
  palletIndex     Int
  errorIndex      Int
  name            String
  docs            String
  ignoredEgresses IgnoredEgress[]

  @@unique([specVersion, palletIndex, errorIndex])
  @@schema("public")
}

model Quote {
  id                                           Int                @id @default(autoincrement())
  swapDepositChannel                           SwapDepositChannel @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId                         BigInt             @unique
  channelOpenedAt                              DateTime
  swapRequest                                  SwapRequest?       @relation(fields: [swapRequestId], references: [id])
  swapRequestId                                BigInt?            @unique
  swapRequestNativeId                          BigInt?            @unique
  srcAsset                                     InternalAsset
  destAsset                                    InternalAsset
  maxBoostFeeBps                               Int?
  numberOfChunks                               Int?
  expectedDepositAmount                        Decimal            @db.Decimal(30, 0)
  quotedIntermediateAmount                     Decimal?           @db.Decimal(30, 0)
  quotedEgressAmount                           Decimal            @db.Decimal(30, 0)
  quotedPrice                                  Decimal
  inputAssetPriceAtChannelOpening              Decimal?
  outputAssetPriceAtChannelOpening             Decimal?
  indexPriceAtChannelOpening                   Decimal?
  slippageTolerancePercent                     Decimal?
  livePriceSlippageTolerancePercent            Decimal?
  executedAt                                   DateTime?
  executedPrice                                Decimal?
  executedSlippagePercent                      Decimal?
  inputAssetPriceAtCompletion                  Decimal?
  outputAssetPriceAtCompletion                 Decimal?
  indexPriceAtCompletion                       Decimal?
  recommendedSlippageTolerancePercent          Decimal?
  recommendedLivePriceSlippageTolerancePercent Decimal?
  refundedAt                                   DateTime?

  @@schema("private")
}

model SolanaPendingTxRef {
  id                   Int                 @id @default(autoincrement())
  address              String?
  slot                 BigInt?
  swapDepositChannel   SwapDepositChannel? @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId BigInt?
  vaultSwapRequest     SwapRequest?        @relation(fields: [vaultSwapRequestId], references: [id])
  vaultSwapRequestId   BigInt?
  failedVaultSwap      FailedSwap?         @relation(fields: [failedVaultSwapId], references: [id])
  failedVaultSwapId    Int?

  @@schema("private")
}
