// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// `pnpm prisma format` after changes :)

generator client {
  provider        = "prisma-client-js"
  // https://github.com/prisma/prisma/issues/2584#issuecomment-646414549
  // https://github.com/prisma/prisma/issues/6603#issuecomment-849979849
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "private"]
}

model DepositChannel {
  id             BigInt  @id @default(autoincrement())
  channelId      BigInt
  srcChain       Chain
  issuedBlock    Int
  depositAddress String
  isSwapping     Boolean

  @@unique([issuedBlock, srcChain, channelId])
  @@index([depositAddress])
  @@schema("private")
}

enum Chain {
  Polkadot
  Ethereum
  Bitcoin
  Arbitrum
  Solana

  @@schema("public")
}

enum InternalAsset {
  Flip
  Usdc
  Dot
  Eth
  Btc
  Usdt
  ArbEth
  ArbUsdc
  Sol
  SolUsdc

  @@schema("public")
}

model SwapDepositChannel {
  id                     BigInt                        @id @default(autoincrement())
  channelId              BigInt
  srcChain               Chain
  srcAsset               InternalAsset
  depositAddress         String
  expectedDepositAmount  Decimal?                      @db.Decimal(30, 0)
  destAsset              InternalAsset
  destAddress            String
  ccmGasBudget           Decimal?                      @db.Decimal(30, 0)
  ccmMessage             String?
  issuedBlock            Int
  expiryBlock            Int? // TODO(mainnet): remove this column
  srcChainExpiryBlock    BigInt?
  brokerCommissionBps    Int
  maxBoostFeeBps         Int                           @default(0)
  isExpired              Boolean                       @default(false)
  createdAt              DateTime                      @default(now())
  failedSwaps            FailedSwap[]
  estimatedExpiryAt      DateTime?
  openedThroughBackend   Boolean                       @default(false)
  openingFeePaid         Decimal                       @db.Decimal(30, 0)
  affiliates             SwapDepositChannelAffiliate[]
  failedBoosts           FailedBoost[]
  fokMinPriceX128        Decimal?                      @db.Decimal(78, 0)
  fokRefundAddress       String?
  fokRetryDurationBlocks Int?
  numberOfChunks         Int?                          @default(1)
  chunkIntervalBlocks    Int?
  swapRequests           SwapRequest[]

  @@unique([issuedBlock, srcChain, channelId])
  @@index([depositAddress])
  @@schema("public")
}

model SwapDepositChannelAffiliate {
  id            BigInt             @id @default(autoincrement())
  account       String
  commissionBps Int
  channel       SwapDepositChannel @relation(fields: [channelId], references: [id])
  channelId     BigInt

  @@index([channelId])
  @@schema("public")
}

enum SwapRequestOrigin {
  DEPOSIT_CHANNEL
  VAULT
  INTERNAL

  @@schema("public")
}

enum SwapRequestType {
  LEGACY_SWAP
  NETWORK_FEE
  INGRESS_EGRESS_FEE
  REGULAR
  CCM

  @@schema("public")
}

model SwapRequest {
  id                           BigInt              @id @default(autoincrement())
  /// the swap request id on the state chain
  nativeId                     BigInt              @unique
  originType                   SwapRequestOrigin
  swapDepositChannel           SwapDepositChannel? @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId         BigInt?
  depositTransactionRef        String?
  srcAsset                     InternalAsset
  destAsset                    InternalAsset
  depositAmount                Decimal?            @db.Decimal(30, 0)
  swapInputAmount              Decimal             @db.Decimal(30, 0)
  requestType                  SwapRequestType
  ccmDepositReceivedBlockIndex String?
  ccmGasBudget                 Decimal?            @db.Decimal(30, 0)
  ccmMessage                   String?
  srcAddress                   String?
  destAddress                  String?
  swapRequestedAt              DateTime
  swapRequestedBlockIndex      String?
  depositFinalisedAt           DateTime?
  depositFinalisedBlockIndex   String?
  prewitnessedDepositId        BigInt?
  effectiveBoostFeeBps         Int?
  depositBoostedAt             DateTime?
  depositBoostedBlockIndex     String?
  completedAt                  DateTime?
  completedBlockIndex          String?
  egress                       Egress?             @relation("egress", fields: [egressId], references: [id])
  egressId                     BigInt?
  refundEgress                 Egress?             @relation("refundEgress", fields: [refundEgressId], references: [id])
  refundEgressId               BigInt?
  ignoredEgresses              IgnoredEgress[]
  swaps                        Swap[]
  fees                         SwapFee[]
  numberOfChunks               Int?
  chunkIntervalBlocks          Int?

  @@index([srcAsset, prewitnessedDepositId])
  @@schema("public")
}

enum SwapType {
  SWAP
  PRINCIPAL
  GAS
  INGRESS_EGRESS_FEE
  NETWORK_FEE

  @@schema("public")
}

model Swap {
  id                              BigInt        @id @default(autoincrement())
  /// the swap id on the state chain
  nativeId                        BigInt        @unique
  type                            SwapType
  srcAsset                        InternalAsset
  swapInputAmount                 Decimal       @db.Decimal(30, 0) // deposit amount after ingress fee was decucted
  intermediateAmount              Decimal?      @db.Decimal(30, 0)
  swapOutputAmount                Decimal?      @db.Decimal(30, 0) // output of the swap before egress fee is deducted
  fees                            SwapFee[]
  destAsset                       InternalAsset
  swapExecutedAt                  DateTime?
  swapExecutedBlockIndex          String?
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @default(now()) @updatedAt
  swapScheduledAt                 DateTime
  swapScheduledBlockIndex         String
  latestSwapRescheduledAt         DateTime?
  latestSwapRescheduledBlockIndex String?
  retryCount                      Int           @default(0)
  swapRequest                     SwapRequest   @relation(fields: [swapRequestId], references: [id])
  swapRequestId                   BigInt

  @@schema("public")
}

enum SwapFeeType {
  LIQUIDITY
  NETWORK
  INGRESS
  EGRESS
  BROKER
  BOOST

  @@schema("public")
}

model SwapFee {
  id            BigInt        @id @default(autoincrement())
  swap          Swap?         @relation(fields: [swapId], references: [id])
  swapId        BigInt?
  swapRequest   SwapRequest?  @relation(fields: [swapRequestId], references: [id])
  swapRequestId BigInt?
  type          SwapFeeType
  asset         InternalAsset
  amount        Decimal       @db.Decimal(30, 0)

  @@index([swapId])
  @@schema("public")
}

enum FailedSwapReason {
  BelowMinimumDeposit
  NotEnoughToPayFees // gas price to process deposit is too high
  UnsupportedForTargetChain // CCM reason
  InsufficientDepositAmount // CCM reason

  @@schema("public")
}

model FailedSwap {
  id                    Int                 @id @default(autoincrement())
  reason                FailedSwapReason
  destAddress           String
  destChain             Chain
  depositAmount         Decimal             @db.Decimal(30, 0)
  srcChain              Chain
  srcAsset              InternalAsset
  swapDepositChannel    SwapDepositChannel? @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId  BigInt?
  depositTransactionRef String?
  failedAt              DateTime
  failedBlockIndex      String
  ccmGasBudget          Decimal?            @db.Decimal(30, 0)
  ccmMessage            String?

  @@index([swapDepositChannelId])
  @@schema("public")
}

model FailedBoost {
  id                   Int                 @id @default(autoincrement())
  swapDepositChannel   SwapDepositChannel? @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId BigInt?
  amount               Decimal             @db.Decimal(30, 0)
  failedAtTimestamp    DateTime
  failedAtBlockIndex   String

  @@index([swapDepositChannelId])
  @@schema("public")
}

enum EgressIgnoredType {
  SWAP
  REFUND

  @@schema("public")
}

model IgnoredEgress {
  id                BigInt            @id @default(autoincrement())
  amount            Decimal           @db.Decimal(30, 0)
  ignoredAt         DateTime
  ignoredBlockIndex String
  swapRequest       SwapRequest       @relation(fields: [swapRequestId], references: [id])
  swapRequestId     BigInt            @unique
  stateChainError   StateChainError   @relation(fields: [stateChainErrorId], references: [id])
  stateChainErrorId Int
  type              EgressIgnoredType
  createdAt         DateTime          @default(now())

  @@schema("public")
}

model Egress {
  id                   BigInt        @id @default(autoincrement())
  /// the egress id on the state chain
  nativeId             BigInt
  chain                Chain
  amount               Decimal       @db.Decimal(30, 0)
  scheduledAt          DateTime
  scheduledBlockIndex  String
  broadcast            Broadcast?    @relation(fields: [broadcastId], references: [id])
  broadcastId          BigInt?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now()) @updatedAt
  swapRequests         SwapRequest[] @relation("egress")
  refundedSwapRequests SwapRequest[] @relation("refundEgress")

  @@unique([nativeId, chain])
  @@schema("public")
}

enum BroadcastType {
  BATCH
  CCM

  @@schema("public")
}

model Broadcast {
  id                  BigInt        @id @default(autoincrement())
  /// the broadcast id on the state chain
  nativeId            BigInt
  chain               Chain
  type                BroadcastType @default(BATCH)
  egresses            Egress[]
  requestedAt         DateTime
  requestedBlockIndex String
  succeededAt         DateTime?
  succeededBlockIndex String?
  abortedAt           DateTime?
  abortedBlockIndex   String?
  replacedBy          Broadcast?    @relation("replacedBy", fields: [replacedById], references: [id])
  replaces            Broadcast?    @relation("replacedBy")
  replacedById        BigInt?       @unique
  transactionRef      String?       @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now()) @updatedAt

  @@unique([nativeId, chain])
  @@schema("public")
}

model State {
  id     Int @id @default(autoincrement())
  height Int @default(0)

  @@schema("private")
}

model MarketMaker {
  id        Int    @id @default(autoincrement())
  name      String @unique
  publicKey String

  @@schema("private")
}

enum ThirdPartyProtocol {
  lifi
  squid

  @@schema("public")
}

model ThirdPartySwap {
  id            BigInt             @id @default(autoincrement())
  uuid          String             @unique
  protocol      ThirdPartyProtocol
  routeResponse Json
  txHash        String
  txLink        String
  createdAt     DateTime           @default(now())

  @@schema("public")
}

model Pool {
  id                        Int           @id @default(autoincrement())
  baseAsset                 InternalAsset
  quoteAsset                InternalAsset
  liquidityFeeHundredthPips Int

  @@unique([baseAsset, quoteAsset])
  @@schema("public")
}

model BoostPool {
  id              Int           @id @default(autoincrement())
  depositEnabled  Boolean
  withdrawEnabled Boolean
  boostEnabled    Boolean
  asset           InternalAsset
  feeTierPips     Int

  @@unique([asset, feeTierPips])
  @@schema("public")
}

model ChainTracking {
  id                  Int      @id @default(autoincrement())
  chain               Chain    @unique
  height              BigInt   @default(0)
  previousHeight      BigInt   @default(0)
  eventWitnessedBlock Int
  blockTrackedAt      DateTime @default(now())
  updatedAt           DateTime @updatedAt @db.Timestamptz(3)

  @@schema("public")
}

model StateChainError {
  id              Int             @id @default(autoincrement())
  specVersion     Int
  palletIndex     Int
  errorIndex      Int
  name            String
  docs            String
  ignoredEgresses IgnoredEgress[]

  @@unique([specVersion, palletIndex, errorIndex])
  @@schema("public")
}

model QuoteResult {
  id                 Int           @id @default(autoincrement())
  srcAsset           InternalAsset
  destAsset          InternalAsset
  depositAmount      Decimal       @db.Decimal(30, 0)
  quoterIntermediate Decimal?      @db.Decimal(30, 0)
  quoterOutput       Decimal       @db.Decimal(30, 0)
  quoterDuration     Int
  quoterFees         Json?
  poolIntermediate   Decimal?      @db.Decimal(30, 0)
  poolOutput         Decimal       @db.Decimal(30, 0)
  poolDuration       Int?
  poolFees           Json?
  createdAt          DateTime      @default(now())
  version            Int

  @@index([srcAsset, destAsset])
  @@schema("private")
}

model BlockedAddress {
  address String @unique

  @@schema("private")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model backup_swap_fees {
  id     BigInt?
  swapId BigInt?
  type   SwapFeeType?
  asset  InternalAsset?
  amount Decimal?       @db.Decimal(30, 0)

  @@ignore
  @@schema("private")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model backup_swaps {
  id                              BigInt?
  nativeId                        BigInt?
  swapExecutedAt                  DateTime?
  createdAt                       DateTime?
  updatedAt                       DateTime?
  depositAmount                   Decimal?       @db.Decimal(30, 0)
  depositReceivedAt               DateTime?
  swapDepositChannelId            BigInt?
  destAddress                     String?
  depositReceivedBlockIndex       String?
  swapExecutedBlockIndex          String?
  srcAsset                        InternalAsset?
  destAsset                       InternalAsset?
  intermediateAmount              Decimal?       @db.Decimal(30, 0)
  egressId                        BigInt?
  type                            SwapType?
  ccmDepositReceivedBlockIndex    String?
  ccmGasBudget                    Decimal?       @db.Decimal(30, 0)
  ccmMessage                      String?
  swapOutputAmount                Decimal?       @db.Decimal(30, 0)
  swapInputAmount                 Decimal?       @db.Decimal(30, 0)
  effectiveBoostFeeBps            Int?
  depositBoostedAt                DateTime?
  depositBoostedBlockIndex        String?
  depositTransactionRef           String?
  prewitnessedDepositId           BigInt?
  swapScheduledAt                 DateTime?
  swapScheduledBlockIndex         String?
  retryCount                      Int?
  refundEgressId                  BigInt?
  latestSwapRescheduledAt         DateTime?
  latestSwapRescheduledBlockIndex String?

  @@ignore
  @@schema("private")
}
